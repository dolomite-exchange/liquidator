/* Autogenerated file. Do not edit manually. */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Provider } from '@ethersproject/providers';
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export declare namespace IGenericTraderBase {
  export type TraderParamStruct = {
    traderType: BigNumberish;
    makerAccountIndex: BigNumberish;
    trader: string;
    tradeData: BytesLike;
  };

  export type TraderParamStructOutput = [number, BigNumber, string, string] & {
    traderType: number;
    makerAccountIndex: BigNumber;
    trader: string;
    tradeData: string;
  };
}

export declare namespace IDolomiteStructs {
  export type AccountInfoStruct = { owner: string; number: BigNumberish };

  export type AccountInfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };
}

export declare namespace IGenericTraderProxyV2 {
  export type UserConfigStruct = {
    deadline: BigNumberish;
    balanceCheckFlag: BigNumberish;
    eventType: BigNumberish;
  };

  export type UserConfigStructOutput = [BigNumber, number, number] & {
    deadline: BigNumber;
    balanceCheckFlag: number;
    eventType: number;
  };

  export type SwapExactInputForOutputParamsStruct = {
    accountNumber: BigNumberish;
    marketIdsPath: BigNumberish[];
    inputAmountWei: BigNumberish;
    minOutputAmountWei: BigNumberish;
    tradersPath: IGenericTraderBase.TraderParamStruct[];
    makerAccounts: IDolomiteStructs.AccountInfoStruct[];
    userConfig: IGenericTraderProxyV2.UserConfigStruct;
  };

  export type SwapExactInputForOutputParamsStructOutput = [
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber,
    IGenericTraderBase.TraderParamStructOutput[],
    IDolomiteStructs.AccountInfoStructOutput[],
    IGenericTraderProxyV2.UserConfigStructOutput
  ] & {
    accountNumber: BigNumber;
    marketIdsPath: BigNumber[];
    inputAmountWei: BigNumber;
    minOutputAmountWei: BigNumber;
    tradersPath: IGenericTraderBase.TraderParamStructOutput[];
    makerAccounts: IDolomiteStructs.AccountInfoStructOutput[];
    userConfig: IGenericTraderProxyV2.UserConfigStructOutput;
  };

  export type TransferAmountStruct = {
    marketId: BigNumberish;
    amountWei: BigNumberish;
  };

  export type TransferAmountStructOutput = [BigNumber, BigNumber] & {
    marketId: BigNumber;
    amountWei: BigNumber;
  };

  export type TransferCollateralParamStruct = {
    fromAccountNumber: BigNumberish;
    toAccountNumber: BigNumberish;
    transferAmounts: IGenericTraderProxyV2.TransferAmountStruct[];
  };

  export type TransferCollateralParamStructOutput = [
    BigNumber,
    BigNumber,
    IGenericTraderProxyV2.TransferAmountStructOutput[]
  ] & {
    fromAccountNumber: BigNumber;
    toAccountNumber: BigNumber;
    transferAmounts: IGenericTraderProxyV2.TransferAmountStructOutput[];
  };

  export type ExpiryParamStruct = {
    marketId: BigNumberish;
    expiryTimeDelta: BigNumberish;
  };

  export type ExpiryParamStructOutput = [BigNumber, number] & {
    marketId: BigNumber;
    expiryTimeDelta: number;
  };

  export type SwapExactInputForOutputAndModifyPositionParamsStruct = {
    accountNumber: BigNumberish;
    marketIdsPath: BigNumberish[];
    inputAmountWei: BigNumberish;
    minOutputAmountWei: BigNumberish;
    tradersPath: IGenericTraderBase.TraderParamStruct[];
    makerAccounts: IDolomiteStructs.AccountInfoStruct[];
    transferCollateralParams: IGenericTraderProxyV2.TransferCollateralParamStruct;
    expiryParams: IGenericTraderProxyV2.ExpiryParamStruct;
    userConfig: IGenericTraderProxyV2.UserConfigStruct;
  };

  export type SwapExactInputForOutputAndModifyPositionParamsStructOutput = [
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber,
    IGenericTraderBase.TraderParamStructOutput[],
    IDolomiteStructs.AccountInfoStructOutput[],
    IGenericTraderProxyV2.TransferCollateralParamStructOutput,
    IGenericTraderProxyV2.ExpiryParamStructOutput,
    IGenericTraderProxyV2.UserConfigStructOutput
  ] & {
    accountNumber: BigNumber;
    marketIdsPath: BigNumber[];
    inputAmountWei: BigNumber;
    minOutputAmountWei: BigNumber;
    tradersPath: IGenericTraderBase.TraderParamStructOutput[];
    makerAccounts: IDolomiteStructs.AccountInfoStructOutput[];
    transferCollateralParams: IGenericTraderProxyV2.TransferCollateralParamStructOutput;
    expiryParams: IGenericTraderProxyV2.ExpiryParamStructOutput;
    userConfig: IGenericTraderProxyV2.UserConfigStructOutput;
  };
}

export interface GenericTraderProxyV2Interface extends utils.Interface {
  functions: {
    'DOLOMITE_MARGIN()': FunctionFragment;
    'DOLOMITE_MARGIN_OWNER()': FunctionFragment;
    'DOLOMITE_REGISTRY()': FunctionFragment;
    'isCallerAuthorized(address)': FunctionFragment;
    'setIsCallerAuthorized(address,bool)': FunctionFragment;
    'swapExactInputForOutput((uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint8,uint8)))': FunctionFragment;
    'swapExactInputForOutputAndModifyPosition((uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint256,(uint256,uint256)[]),(uint256,uint32),(uint256,uint8,uint8)))': FunctionFragment;
    'swapExactInputForOutputAndModifyPositionForDifferentAccount(address,(uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint256,(uint256,uint256)[]),(uint256,uint32),(uint256,uint8,uint8)))': FunctionFragment;
    'swapExactInputForOutputForDifferentAccount(address,(uint256,uint256[],uint256,uint256,(uint8,uint256,address,bytes)[],(address,uint256)[],(uint256,uint8,uint8)))': FunctionFragment;
  };
  events: {};

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOLOMITE_MARGIN'
      | 'DOLOMITE_MARGIN_OWNER'
      | 'DOLOMITE_REGISTRY'
      | 'isCallerAuthorized'
      | 'setIsCallerAuthorized'
      | 'swapExactInputForOutput'
      | 'swapExactInputForOutputAndModifyPosition'
      | 'swapExactInputForOutputAndModifyPositionForDifferentAccount'
      | 'swapExactInputForOutputForDifferentAccount',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'DOLOMITE_MARGIN',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'DOLOMITE_MARGIN_OWNER',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'DOLOMITE_REGISTRY',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'isCallerAuthorized',
    values: [string],
  ): string;

  encodeFunctionData(
    functionFragment: 'setIsCallerAuthorized',
    values: [string, boolean],
  ): string;

  encodeFunctionData(
    functionFragment: 'swapExactInputForOutput',
    values: [IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct],
  ): string;

  encodeFunctionData(
    functionFragment: 'swapExactInputForOutputAndModifyPosition',
    values: [
      IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct
    ],
  ): string;

  encodeFunctionData(
    functionFragment: 'swapExactInputForOutputAndModifyPositionForDifferentAccount',
    values: [
      string,
      IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct
    ],
  ): string;

  encodeFunctionData(
    functionFragment: 'swapExactInputForOutputForDifferentAccount',
    values: [string, IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct],
  ): string;

  decodeFunctionResult(
    functionFragment: 'DOLOMITE_MARGIN',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'DOLOMITE_MARGIN_OWNER',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'DOLOMITE_REGISTRY',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'isCallerAuthorized',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setIsCallerAuthorized',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'swapExactInputForOutput',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'swapExactInputForOutputAndModifyPosition',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'swapExactInputForOutputAndModifyPositionForDifferentAccount',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'swapExactInputForOutputForDifferentAccount',
    data: BytesLike,
  ): Result;
}

export interface GenericTraderProxyV2 extends BaseContract {
  interface: GenericTraderProxyV2Interface;
  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_MARGIN_OWNER(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    isCallerAuthorized(
      _caller: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    setIsCallerAuthorized(
      _caller: string,
      _isAuthorized: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactInputForOutput(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactInputForOutputAndModifyPosition(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactInputForOutputAndModifyPositionForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapExactInputForOutputForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };
  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_MARGIN_OWNER(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<string>;

    isCallerAuthorized(
      _caller: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    setIsCallerAuthorized(
      _caller: string,
      _isAuthorized: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactInputForOutput(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactInputForOutputAndModifyPosition(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactInputForOutputAndModifyPositionForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapExactInputForOutputForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;
  };
  filters: {};
  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    isCallerAuthorized(
      _caller: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setIsCallerAuthorized(
      _caller: string,
      _isAuthorized: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactInputForOutput(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactInputForOutputAndModifyPosition(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactInputForOutputAndModifyPositionForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    swapExactInputForOutputForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };
  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLOMITE_MARGIN_OWNER(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCallerAuthorized(
      _caller: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setIsCallerAuthorized(
      _caller: string,
      _isAuthorized: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutput(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutputAndModifyPosition(
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutputAndModifyPositionForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutputForDifferentAccount(
      _accountOwner: string,
      _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };

  connect(signerOrProvider: Signer | Provider | string): this;

  attach(addressOrName: string): this;

  deployed(): Promise<this>;

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_MARGIN_OWNER(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_REGISTRY(overrides?: CallOverrides): Promise<string>;

  isCallerAuthorized(
    _caller: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  setIsCallerAuthorized(
    _caller: string,
    _isAuthorized: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactInputForOutput(
    _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactInputForOutputAndModifyPosition(
    _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactInputForOutputAndModifyPositionForDifferentAccount(
    _accountOwner: string,
    _params: IGenericTraderProxyV2.SwapExactInputForOutputAndModifyPositionParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapExactInputForOutputForDifferentAccount(
    _accountOwner: string,
    _params: IGenericTraderProxyV2.SwapExactInputForOutputParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;
}
